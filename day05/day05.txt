
1. 액션태그
 - 서버나 클라이언트에게 어떤 행동을 하도록 명령하는  태그
 - 페이지와 페이지 사이를 제어하거나 다른 페이지의 실행 결과 내용을
 현재 페이지에 포함하거나 자바빈즈(객체)등의 다양한 기능을 제공한다.
 - 액션태그는 XML형식인 <jsp: ...>

	1-1. forward(<jsp:forward/>)
	-> 다른 페이지로의 이동, 페이지 흐름 제어
	1-2. include(<jsp:include/>)
	-> 외부 페이지의 내용을 포함하거나 페이지 모듈화
	1-3. param(<jsp:param/>)
	-> 현재 페이지에서 다른 페이지에 정보를 전달할 때 사용
	1-4. useBean(<jsp:useBean/>)
	1-5. setProperty(<jsp:setProperty/>)
	1-6. getProperty(<jsp:getProperty/>)

2. MVC 디자인 패턴
  2-1. 디자인 패턴 이란?
   - 디자인 패턴이란 많은 실무 프로그래머들이 인정한 효율적인 코딩방법
   or 구조 라고 보시면 됩니다.

  2-2. 효율적인 코딩방법 이란?
    - 1. 코드가 명확하고 단순
    - 2. 모듈(Class or Fucntion 등) 은 한 가지 기능만 하도록 세분화
    - 3. 재사용성이 높아
    - 4. 유지보수가 쉽다
    - 5. 리소스의 낭비가 없거나, 최소화

  2-3. MVC 패턴
    - M :  Model(데이터와 대응)
    - V : View(보여지는 화면)
    - C : Controller(흐름제어)

    - Model : 애플리케이션의 정보, 데이터를 나타낸다. 이러한 data 정보들의
    가공을 책임진다.
    - View : input 텍스트, 체크박스 항목 등과 같은 인터페이스 요소를 
    나타냅니다. 다시 말해 데이터 및 객체의 입력, 그리고 보여주는 출력을 담당한다.
    데이터를 기반으로 사용자들이 볼 수 있는 화면입니다.
    - Controller : 데이터와 사용자인터페이스 요소들을 잇는 다리역할을 한다.
    즉, 사용자가 데이터를 클릭하고, 수정하는 것에 대한 "이벤트" 들을
    처리하는 부분을 뜻합니다.

  2-4. MVC1 패턴
    - MVC1패턴의 경우 view와 Controller를 모두 JSP가 담당하는 형태를 가진다.
    즉 JSP하나로 유저의 요청을 받고 응답을 처리하므로 구현의 난이도는 쉽다
    - 단순한 프로젝트에서는 괜찮겠지만, 내용이 복잡하고 거대해질수록
    이 패턴은 힘을 잃는다. 즉, 유지보수에 있어서 문제가 발생한다.

  2-5. MVC2패턴
    - MVC2패턴은 널리 표준으로 사용되는 패턴입니다. 요청을 하나의 
    컨트롤러(Servlet)가 먼저 받는다. 즉, MVC1과는 다르게 Controller, View가
    분리되어 있다. 따라서 역할이 분리되어 MVC1패턴에서의 단점을 보완할 수 있다.
    따라서 개발자는 M,V,C 중에서 수정해야 할 부분이 있다면, 그것만 꺼내여
    수정하면 된다. 즉, 유지보수에 있어서 큰 이점을 가진다.

  2-6. DTO(Data Trasnfer Object) / VO(Value Object)
    - 양쪽에서 전송되어 오고가는 데이터들을 담은 객체, jsp에서는 Bean이라고
    부른다. 여러 데이터들을 포장해서 만든 데이터 포장 객체
    - 사용자가 입력한 값을 객체 형태로 받을 수 있게 클래스 구성
    - 폼에서 입력된 데이터들을 하나의 DTO 객체로 변환 가능
    - 하나의 데이터베이스 레코드를 저장하여 레코드와 같은 구조를 가짐
    - 레코드가 50개면 DTO객체도 50개
    - 데이터가 포함된 객체를 한 시스템에서 다른 시스템으로 전달하는
    작업을 처리하는 객체

  2-7. DAO(Data Access Object)
    - 데이터에 접근, 데이터를 관리하기 위한 객체 데이터들을 관리(추가, 수정,삭제,
    읽기)하는 여러 메소드들이 정의되있다.
    - 추가(insert), 삭제(delete), 수정(update), 읽기(select)등 레코드 처리를 주 목적
    으로 한다.
    -  DTO 객체를 데이터베이스 서버에 저장
    - 데이터베이스 서버로부터 레코드를 select한 후, DTO 객체로 변경해 가지옴
    - 데이터 접근을 목적으로 하는 객체



















