
1. Front-Controller 패턴
  
	a.jsp	-> 	web.xml	-> FrontController		-> c.jsp
					↓↑
				Controller(~~ action)
					↓↑
				DAO, DTO(beans)
					↓↑
					DB

  - 개발자가 정의한 확장자( .do, .bo, ...)를 페이지 이동 주소에 작성하게 되면
  서블릿이 web.xml에 가서 가야할 경로를 찾는다. 각 URL을 전부 web.xml에 하나씩
  매핑시켜놓게 되면 코드가 일어지기 때문에 *.do 방법을 사용하여 .do가 붙은 모든
  URL 요청을 하나의 경로로 보내주도록 설정해 놓는다. 이러한 경로를 프론트 컨트롤러
  라고 한다.
  - 모든 리소스(Resource)요청을 처리해주는 하나의 컨트롤러를 두는 패턴이다.
  - 모든 요청(Request)를 하나의 컨트롤러를 통해 작업을 한 곳에서 수행할 수 있다.
  추적(Tracking)이나 보안(Security)를 적용할 때 하나의 컨트롤러에서 하기
  때문에 편하다.
  - 이 프론트 컨트롤러는 *.do 앞에 있는 요청명으로 어떤 로직을 수행할지
  파단하고 분기처리를 한다. 프론트 컨트롤러 안에서 모든 비지니스 로직을 구현해
  놓게되면 마찬가지로 코드가 길어지고 유지보수 및 재사용이 어렵기 때문에
  용도별로 Controller(Action)를 따로 만들어 놓는다. 해당 Action에 execute()
  메서드를 만들어서 그 내부에 비지니스 로직을 구현하면 프론트 컨트롤러에서는
  그 메소드를 호출만 하면 된다.
  - 모든 Action에 execute()메서드를 구현해야 하기 때문에 Action 인터페이스를
  만들고 그 안에 추상 메서드로 execute()를 선언해 놓으면 각 Action들 마다
  그 인터페이스를 지정해준 후 재정의를 하여 구현한다.
  - 비지니스 로직이 모두 완료되면 어떤 페이지로 이동을 할 것인지,
  어떤 방식(Forward/Redirect)으로 이동할 것인지를 정해서 Front-Controller로 
  리턴해야 한다. 이 값들을 담은 객체르 만들어서 리턴을 해주고
  그 객체의 타입을 ActionForward라는 클래스 구현을 한다. execute()는 
  ActionForward타입의 객체를 return하고, 그 리턴된 객체를 Front-Controller 가 받아서
  내부에 있는 정보를 해석한 후 알맞은 view와 방식으로 페이지를 이동해 준다.(일괄처리) 
  - execute()안에 비지로직 구현할 때 DB에 접근하는 코드들이 사용이 된다.
  따라서 DAO안에 DB에 관련된 메소드들을 선언해놓고 해당 Action클래스 안의
  execute() 에서는 그 메서드들이 적절히 호출하여 서비스(기능)를 구현한다. 
  예를들어, AAction과 BAction 둘 다 특정한 쿼리문 하나가 필요하다면, 그 쿼리문에
  관련된(DB에 관련된) 코드들은 DAO의 메서드로 선언해놓고 두 Action에서
  그 메소드를 호출하여 조합해서 기능을 구현해 낸다.

  - 위에서 설명한 것처럼 설계가 굉장히 복잡하기 때문에 대규모가 아닌 소규모
  프로젝트에 반영했을때에는 오히려 좋지 않은 결과를 초래한다. 따라서 목적에 맞는
  설계를 해야한다.

2. Redirect / Forward
  2-1. Redirect
    - Web Browser -> 결제 페이지(현재 페이지) -> 새로고침 -> 결제 페이지(새 페이지)
	클라이언트가 요청했을 때 이전의 값이 남아있지 않도록 하기 위해 사용한다.
	회원가입, 글 작성, 결제 등(DB에 수정이 되는 경우에는 필수)

  2-2. Forward
    - Web Browser -> 검색 페이지(현재 페이지) -> 검색 결과 페이지(검색한 키워드 유지)
   	클라이언트가 request 객체를 통해 값을 넘겨주어야 할 때 혹은 단순 조회를
	요청할 때 사용한다. 목록, 검색 등














