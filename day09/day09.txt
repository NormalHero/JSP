
1. 쿠키와 세션
 1-1. 쿠키(Cookie)
   - 웹 브라우저가 보관하고 있는 데이터로, 웹 서버에 요청을 보낼 때 쿠리를 헤더에
   담에서 전송한다.
   - 클라이언트의 일정 폴더에 정보를 저장하기 때문에 서버의 부하를 줄일 수 있다.
   - 정보가 사용자 컴퓨터에 저장되기 때문에 보안에 위협을 받을 수 있다.
   - 데이터 저장 용량에 제한이 있다(소용량). 과자 부스러기처럼 작은 값.
   - 일반 사용자가 브라어저 내의 기능인 "쿠키차단"을 사용하면 무용지물

 1-2. 동작방식
   - 1. 쿠키생성 : 웹 서버에서 쿠키를 생성하고 쿠키에 응답 데이터를 담아
    	웹 브라우저에 전송한다.
   - 2. 쿠키저장 : 웹 브라우저는 응답 데이터를 담고 있는 쿠키를 메모리나 파일로 전송
   - 3. 쿠키전송 : 웹 브라우저는 쿠키 요청이 있을 때마다 웹 서버에 전송한다.
	          웹 서버는 쿠키를 사용해서 필요한 작업을 수행할 수 있다.

  1-3. 쿠키 생성 및 사용방식
    - 1. 쿠키를 생성하고 response 객체에 담는다.
  	Cookie 객체 = new Cookie("쿠키이름", "쿠키값");
	response.addCookie(객체);
	
    - 2. 쿠키 유무를 확인 후 쿠키의 값을 받아온다
	String check = request.getHeader("Cookie");
	if( check != null ){
		Cookie[] cookie = request.getCookies();
	}

   -3. 쿠키를 삭제한다.
	객체.setMaxAge(0);
	// 초단위로 지정하고, 음수를 입력하면 브라우저 종료시 쿠키 삭제
  1-4. 세션(Session)
    - 내장 객체로서 브라우저마다 한 개씩 존재하고, 고유한 sessionID 생성 후 정보를 
    추출한다.
    - JSP에서만 접근 할 수 있기 때문에 보안성이 좋고, 저장 용량의 한계가 거의 없다.
    - 서버에 데이터를 저장함으로 서버에 부하가 걸릴 수 있다.
    - 쿠키보다 세션을 쓰는것이 더 안정적이고 안전하다.
   
  1-5. session 사용법
    - 1. session값 설정하기
	session.setAttribute("세션아이디", 세션 값);
	session.setAttribute("user_id", user_id);

   - 2. session 유지시간 설정하기(초 단위)
  	session.setMaxInactiveInterval(60*60);	// 60분동안 세션을 유지한다.
	session.setMaxInactiveInterval(-1);	// 세션의 시간을 무한대로 설정

   - 3. 세션에 저장된 값 가져오기
	session.getAttribute("user_id");
 
   - 4. 세션값 삭제
	session.removeAttribute("user_id");
	session.invalidate();			// 세션 전체 제거, 무효화
















